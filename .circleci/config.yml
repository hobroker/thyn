version: 2.1

orbs:
  codecov: codecov/codecov@1.1.0

commands:
  install-packages:
    description: "Install/restore packages"
    steps:
      - restore_cache:
          keys:
            - &npmCacheKey node_modules-{{ checksum "package-lock.json" }}
      - run: 'if [ ! -d "node_modules" ]; then npm ci; else echo Restored from cache; fi'
      - save_cache:
          key: *npmCacheKey
          paths:
            - node_modules

jobs:
  linter:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - run:
          name: test
          command: |
            node config/build-config.js
            cat .env2
      - install-packages
      - run:
          name: Run linter
          command: npm run lint

  test:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - install-packages
      - run:
          name: Run Tests with coverage
          command: npm run test:coverage
      - codecov/upload

  publish:
    machine: true
    steps:
      - run:
          name: Docker login
          command: docker login https://docker.pkg.github.com --username hobroker --password ${GITHUB_PACKAGES_TOKEN}
      - checkout
      - run:
          name: Build and push
          command: |
            IMAGE_TAG="docker.pkg.github.com/hobroker/thyn/thyn:${CIRCLE_BRANCH}"
            IMAGE_TAG=$(echo ${IMAGE_TAG//:master/})
            docker build . -t ${IMAGE_TAG}
            docker push ${IMAGE_TAG}

  deploy: &deploy
    machine: true
    steps:
      - add_ssh_keys:
          fingerprints:
            - "10:a5:de:e3:e5:36:b2:d7:46:15:96:63:93:cb:a6:3b"
      - run:
          name: Fix host authenticity
          command: ssh-keyscan $SSH_HOST >> ~/.ssh/known_hosts
      - checkout
      - run:
          name: Create .env
          command: |
            declare -a env_vars=(
              "BASE_URL"
              "DOCKER_WEB_PORT"
              "MONGO_CONNECTION_STRING"
              "SPOTIFY_CLIENT_ID"
              "SPOTIFY_CLIENT_SECRET"
              "TAG"
            )

            touch .env
            for env_var_name in "${env_vars[@]}"; do
              echo "${!env_var_name}" >> .env
            done
      - run:
          name: Copy .env to the server
          command: scp .env docker-compose.yml $SSH_USER@$SSH_HOST:/root/apps/thyn-${TAG}
      - run:
          name: Down
          command: |
            ssh $SSH_USER@$SSH_HOST \<< EOF
              cd /root/apps/thyn-${TAG}
              docker-compose down -v --remove-orphans
            EOF
      - run:
          name: Up
          command: |
            ssh $SSH_USER@$SSH_HOST \<< EOF
              cd /root/apps/thyn-${TAG}
              docker-compose up -d --renew-anon-volumes
            EOF
  deploy-stage:
    <<: *deploy
  deploy-prod:
    <<: *deploy

workflows:
  version: 2
  deploy:
    jobs:
      - test
      - linter
          context: thyn-stage
      - publish:
          requires:
            - linter
            - test
      - deploy-stage:
          requires:
            - publish
          filters:
            branches:
              only: stage
          context: thyn-stage
      - deploy-prod:
          requires:
            - publish
          filters:
            branches:
              only: master
          context: thyn-prod

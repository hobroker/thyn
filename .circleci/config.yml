version: 2.1

orbs:
  codecov: codecov/codecov@1.1.0

commands:
  install-packages:
    description: "Install/restore packages"
    steps:
      - restore_cache:
          keys:
            - &npmCacheKey node_modules-{{ checksum "package-lock.json" }}
      - run: 'if [ ! -d "node_modules" ]; then npm ci; else echo Restored from cache; fi'
      - save_cache:
          key: *npmCacheKey
          paths:
            - node_modules
  prepare-ssh:
    description: "Prepare SSH"
    steps:
      - add_ssh_keys:
          fingerprints:
            - "10:a5:de:e3:e5:36:b2:d7:46:15:96:63:93:cb:a6:3b"
      - run:
          name: Fix host authenticity
          command: ssh-keyscan $SSH_HOST >> ~/.ssh/known_hosts
  run-ssh:
    description: "Run SSH command"
    parameters:
      desc:
        description: The name of the command
        type: string
        default: "Run command through SSH"
      command:
        description: The command to run
        type: string
        default: ls
    steps:
      - run:
          name: << parameters.desc >>
          command: ssh $SSH_USER@$SSH_HOST "cd /root/apps/thyn-${CIRCLE_BRANCH} && << parameters.command >>"
  scp:
    description: "Copy file to server"
    parameters:
      desc:
        description: The file(s) to copy
        type: string
        default: "Copy file to server"
      file:
        description: The file
        type: string
    steps:
      - run:
          name: << parameters.desc >>
          command: scp << parameters.file >> $SSH_USER@$SSH_HOST:/root/apps/thyn-${CIRCLE_BRANCH}

jobs:
  linter:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - install-packages
      - run:
          name: Run linter
          command: npm run lint

  test:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - install-packages
      - run:
          name: Run Tests with coverage
          command: npm run test:coverage
      - codecov/upload

  publish:
    machine: true
    steps:
      - checkout
      - run:
          name: Docker login
          command: docker login https://docker.pkg.github.com --username hobroker --password ${GITHUB_PACKAGES_TOKEN}
      - run:
          name: Build
          command: docker build . -t "docker.pkg.github.com/hobroker/thyn/thyn:${VERSION}"
      - run:
          name: Push
          command: docker push "docker.pkg.github.com/hobroker/thyn/thyn:${VERSION}"

  deploy: &deploy
    machine: true
    steps:
      - prepare-ssh
      - checkout
      - run:
          name: Create .env
          command: node config/build-config.js
      - scp:
          desc: Copy .env to the server
          file: ".env docker-compose.yml"
      - run-ssh:
          desc: "Pull latest image"
          command: "docker pull docker.pkg.github.com/hobroker/thyn/thyn:${VERSION}"
      - run-ssh:
          desc: "Down"
          command: "docker-compose down -v --remove-orphans"
      - run-ssh:
          desc: "Up"
          command: "docker-compose up -d --renew-anon-volumes"
  deploy-stage:
    <<: *deploy
  deploy-prod:
    <<: *deploy

workflows:
  version: 2
  deploy:
    jobs:
      - test
      - linter
      - publish:
          requires:
            - linter
            - test
      - deploy-stage:
          requires:
            - publish
          filters:
            branches:
              only: stage
          context: thyn-stage
      - deploy-prod:
          requires:
            - publish
          filters:
            branches:
              only: master
          context: thyn-prod
